var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import {visit} from "unist-util-visit";
function remarkCodeBlock() {
  const visitor = (node) => {
    var _a, _b;
    const {data, meta} = node;
    let lang = node.lang || "html";
    let currentClassName = (_b = (_a = data == null ? void 0 : data.hProperties) == null ? void 0 : _a.class) != null ? _b : "";
    node.data = node.data || {};
    node.data.hProperties = node.data.hProperties || {};
    node.data.hProperties = __spreadProps(__spreadValues({}, node.data.hProperties), {class: `language-${lang} ${currentClassName}`.trim(), lang, meta});
    return node;
  };
  return () => (tree) => visit(tree, "code", visitor);
}
function rehypeCodeBlock() {
  const escapeCode = (code) => {
    code.children = code.children.map((child) => {
      if (child.type === "text") {
        return __spreadProps(__spreadValues({}, child), {value: child.value.replace(/\{/g, "&#123;")});
      }
      return child;
    });
  };
  const visitor = (node) => {
    if (node.tagName === "code") {
      escapeCode(node);
      return;
    }
    if (node.tagName !== "pre")
      return;
    const code = node.children[0];
    if (code.tagName !== "code")
      return;
    node.properties = __spreadValues({}, code.properties);
    return node;
  };
  return () => (tree) => visit(tree, "element", visitor);
}
export {
  rehypeCodeBlock,
  remarkCodeBlock
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2NvZGVibG9jay50cyJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUdPLDJCQUEyQjtBQUNoQyxRQUFNLFVBQVUsQ0FBQyxTQUFjO0FBSmpDO0FBS0ksVUFBTSxDQUFFLE1BQU0sUUFBUztBQUN2QixRQUFJLE9BQU8sS0FBSyxRQUFRO0FBRXhCLFFBQUksbUJBQW1CLHlDQUFNLGdCQUFOLG1CQUFtQixVQUFuQixZQUE0QjtBQUNuRCxTQUFLLE9BQU8sS0FBSyxRQUFRO0FBQ3pCLFNBQUssS0FBSyxjQUFjLEtBQUssS0FBSyxlQUFlO0FBQ2pELFNBQUssS0FBSyxjQUFjLGlDQUFLLEtBQUssS0FBSyxjQUFmLENBQTRCLE9BQU8sWUFBWSxRQUFRLG1CQUFtQixRQUFRLE1BQU07QUFFaEgsV0FBTztBQUFBO0FBRVQsU0FBTyxNQUFNLENBQUMsU0FBYyxNQUFNLE1BQU0sUUFBUTtBQUFBO0FBSTNDLDJCQUEyQjtBQUNoQyxRQUFNLGFBQWEsQ0FBQyxTQUFjO0FBQ2hDLFNBQUssV0FBVyxLQUFLLFNBQVMsSUFBSSxDQUFDLFVBQWU7QUFDaEQsVUFBSSxNQUFNLFNBQVMsUUFBUTtBQUN6QixlQUFPLGlDQUFLLFFBQUwsQ0FBWSxPQUFPLE1BQU0sTUFBTSxRQUFRLE9BQU87QUFBQTtBQUV2RCxhQUFPO0FBQUE7QUFBQTtBQUdYLFFBQU0sVUFBVSxDQUFDLFNBQWM7QUFDN0IsUUFBSSxLQUFLLFlBQVksUUFBUTtBQUMzQixpQkFBVztBQUNYO0FBQUE7QUFHRixRQUFJLEtBQUssWUFBWTtBQUFPO0FBQzVCLFVBQU0sT0FBTyxLQUFLLFNBQVM7QUFDM0IsUUFBSSxLQUFLLFlBQVk7QUFBUTtBQUM3QixTQUFLLGFBQWEsbUJBQUssS0FBSztBQUU1QixXQUFPO0FBQUE7QUFFVCxTQUFPLE1BQU0sQ0FBQyxTQUFjLE1BQU0sTUFBTSxXQUFXO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
