import fetch from 'node-fetch';
import { renderMarkdown } from '@astrojs/markdown-support';
import { __astro_slot } from './dist/internal/__astro_slot.js';
import { h, Fragment } from './dist/internal/h.js';
export { default as Prism } from './components/Prism.astro.js';
import 'prismjs/components/index.js';
import '@astrojs/prism';
import 'prismjs';

if(!('fetch' in globalThis)) {
  globalThis.fetch = fetch;
}


const __TopLevelAstro = {
  site: new URL("http://localhost:3000"),
  fetchContent: (globResult) => fetchContent(globResult, import.meta.url),
};
const __astroInternal = Symbol('astro.internal');
const __astroContext = Symbol.for('astro.context');
async function __render(props, ...children) {
  const Astro = Object.create(__TopLevelAstro, {
    props: {
      value: props,
      enumerable: true
    },
    css: {
      value: (props[__astroInternal] && props[__astroInternal].css) || [],
      enumerable: true
    },
    isPage: {
      value: (props[__astroInternal] && props[__astroInternal].isPage) || false,
      enumerable: true
    },
    request: {
      value: (props[__astroContext] && props[__astroContext].request) || {},
      enumerable: true
    }
  });

  const {
  content,
  $scope
} = Astro.props;
let html = null;
if (content) {
  const {
    content: htmlContent
  } = await renderMarkdown(content, {
    mode: "md",
    $: {
      scopedClassName: $scope
    }
  });
  html = htmlContent;
}

  return h(Fragment, null, h(Fragment, null,(html ? html : h(Fragment, null, h(__astro_slot, { [__astroContext]: props[__astroContext] }, children)))));
}
var Markdown = { isAstroComponent: true, __render };

export { Markdown };
