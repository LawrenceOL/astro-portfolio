import hash from 'shorthash';
import { valueToEstree } from 'estree-util-value-to-estree';
import { generate } from 'astring';
import { h } from './h.js';

async function renderToStaticMarkup(tag, props, children) {
  const html = await h(tag, props, Promise.resolve(children));
  return {
    html
  };
}

var astroHtml = /*#__PURE__*/Object.freeze({
  __proto__: null,
  renderToStaticMarkup: renderToStaticMarkup
});

const serialize = (value) => generate(valueToEstree(value));
const astroHtmlRendererInstance = {
  source: "",
  renderer: astroHtml,
  polyfills: [],
  hydrationPolyfills: []
};
let rendererInstances = [];
function setRenderers(_rendererInstances) {
  rendererInstances = [].concat(_rendererInstances);
}
function isCustomElementTag(name) {
  return typeof name === "string" && /-/.test(name);
}
const rendererCache = new Map();
async function resolveRenderer(Component, props = {}, children) {
  if (rendererCache.has(Component)) {
    return rendererCache.get(Component);
  }
  const errors = [];
  for (const instance of rendererInstances) {
    const {renderer} = instance;
    try {
      const shouldUse = await renderer.check(Component, props, children);
      if (shouldUse) {
        rendererCache.set(Component, instance);
        return instance;
      }
    } catch (err) {
      errors.push(err);
    }
  }
  if (errors.length) {
    throw errors[0];
  }
}
async function generateHydrateScript(scriptOptions, metadata) {
  const {instance, astroId, props} = scriptOptions;
  const {source} = instance;
  const {hydrate, componentUrl, componentExport} = metadata;
  let hydrationSource = "";
  if (instance.hydrationPolyfills.length) {
    hydrationSource += `await Promise.all([${instance.hydrationPolyfills.map((src) => `import("${src}")`).join(", ")}]);
`;
  }
  hydrationSource += source ? `
  const [{ ${componentExport.value}: Component }, { default: hydrate }] = await Promise.all([import("${componentUrl}"), import("${source}")]);
  return (el, children) => hydrate(el)(Component, ${serialize(props)}, children);
` : `
  await import("${componentUrl}");
  return () => {};
`;
  const hydrationScript = `<script type="module">
import setup from '/_astro_frontend/hydrate/${hydrate}.js';
setup("${astroId}", {${metadata.value ? `value: "${metadata.value}"` : ""}}, async () => {
  ${hydrationSource}
});
</script>`;
  return hydrationScript;
}
const getComponentName = (Component, componentProps) => {
  var _a;
  if (componentProps.displayName)
    return componentProps.displayName;
  switch (typeof Component) {
    case "function":
      return (_a = Component.displayName) != null ? _a : Component.name;
    case "string":
      return Component;
    default: {
      return Component;
    }
  }
};
const prepareSlottedChildren = (children) => {
  const $slots = {
    default: ""
  };
  for (const child of children) {
    if (typeof child === "string") {
      $slots.default += child;
    } else if (typeof child === "object" && child["$slot"]) {
      if (!$slots[child["$slot"]])
        $slots[child["$slot"]] = "";
      $slots[child["$slot"]] += child.children.join("").replace(new RegExp(`slot="${child["$slot"]}"s*`, ""));
    }
  }
  return {$slots};
};
const removeSlottedChildren = (_children) => {
  let children = "";
  for (const child of _children) {
    if (typeof child === "string") {
      children += child;
    } else if (typeof child === "object" && child["$slot"]) {
      children += child.children.join("");
    }
  }
  return children;
};
function __astro_component(Component, metadata = {}) {
  if (Component == null) {
    throw new Error(`Unable to render ${metadata.displayName} because it is ${Component}!
Did you forget to import the component or is it possible there is a typo?`);
  } else if (typeof Component === "string" && !isCustomElementTag(Component)) {
    throw new Error(`Astro is unable to render ${metadata.displayName}!
Is there a renderer to handle this type of component defined in your Astro config?`);
  }
  return async function __astro_component_internal(props, ..._children) {
    if (Component.isAstroComponent) {
      return Component.__render(props, prepareSlottedChildren(_children));
    }
    const children = removeSlottedChildren(_children);
    let instance = await resolveRenderer(Component, props, children);
    if (!instance) {
      if (isCustomElementTag(Component)) {
        instance = astroHtmlRendererInstance;
      } else {
        instance = rendererInstances.length === 2 ? rendererInstances[1] : void 0;
      }
      if (!instance) {
        const name = getComponentName(Component, metadata);
        throw new Error(`No renderer found for ${name}! Did you forget to add a renderer to your Astro config?`);
      }
    }
    let {html} = await instance.renderer.renderToStaticMarkup(Component, props, children, metadata);
    if (instance.polyfills.length) {
      let polyfillScripts = instance.polyfills.map((src) => `<script type="module" src="${src}"></script>`).join("");
      html = html + polyfillScripts;
    }
    if (!metadata.hydrate) {
      return html.replace(/\<\/?astro-fragment\>/g, "");
    }
    const stringifiedProps = JSON.stringify(props);
    const astroId = hash.unique(html + stringifiedProps);
    const script = await generateHydrateScript({instance, astroId, props}, metadata);
    const astroRoot = `<astro-root uid="${astroId}">${html}</astro-root>`;
    return [astroRoot, script].join("\n");
  };
}

export { __astro_component, setRenderers };
