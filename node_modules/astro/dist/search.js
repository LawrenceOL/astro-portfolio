import {existsSync} from "fs";
import path from "path";
import {fileURLToPath} from "url";
import glob from "tiny-glob";
function findAnyPage(candidates, astroConfig) {
  for (let candidate of candidates) {
    const url = new URL(`./${candidate}`, astroConfig.pages);
    if (existsSync(url)) {
      const pagesPath = astroConfig.pages.pathname.replace(astroConfig.projectRoot.pathname, "");
      return {
        fileURL: url,
        snowpackURL: `/_astro/${pagesPath}${candidate}.js`
      };
    }
  }
  return false;
}
async function searchForPage(url, astroConfig) {
  const reqPath = decodeURI(url.pathname);
  const base = reqPath.substr(1);
  if (reqPath.endsWith("/")) {
    const candidates2 = [`${base}index.astro`, `${base}index.md`];
    const location2 = findAnyPage(candidates2, astroConfig);
    if (location2) {
      return {
        statusCode: 200,
        location: location2,
        pathname: reqPath
      };
    }
  } else {
    const candidates2 = [`${base}.astro`, `${base}.md`];
    let location2 = findAnyPage(candidates2, astroConfig);
    if (location2) {
      return {
        statusCode: 200,
        location: location2,
        pathname: reqPath
      };
    }
  }
  const candidates = [`${base}/index.astro`, `${base}/index.md`];
  const location = findAnyPage(candidates, astroConfig);
  if (location) {
    return {
      statusCode: 301,
      location: null,
      pathname: reqPath + "/"
    };
  }
  const hasExt = !!path.extname(reqPath);
  if (!location && !hasExt) {
    const collectionLocation = await findCollectionPage(reqPath, astroConfig);
    if (collectionLocation) {
      return {
        statusCode: 200,
        location: collectionLocation,
        pathname: reqPath
      };
    }
  }
  if (reqPath === "/500") {
    return {
      statusCode: 200,
      location: {
        fileURL: new URL("./frontend/500.astro", import.meta.url),
        snowpackURL: `/_astro_frontend/500.astro.js`
      },
      pathname: reqPath
    };
  }
  return {
    statusCode: 404
  };
}
async function findCollectionPage(reqPath, astroConfig) {
  const cwd = fileURLToPath(astroConfig.pages);
  const allCollections = {};
  const files = await glob("**/$*.{astro,md}", {cwd, filesOnly: true});
  for (const srcURL of files) {
    const pagesPath = astroConfig.pages.pathname.replace(astroConfig.projectRoot.pathname, "");
    const snowpackURL = `/_astro/${pagesPath}${srcURL}.js`;
    const reqURL = "/" + srcURL.replace(/\.(astro|md)$/, "").replace(/(^|[\/])\$/, "$1").replace(/index$/, "");
    allCollections[reqURL] = {snowpackURL, fileURL: new URL(srcURL, astroConfig.pages)};
  }
  let collectionMatchState = reqPath;
  do {
    if (allCollections[collectionMatchState]) {
      return allCollections[collectionMatchState];
    }
    collectionMatchState = collectionMatchState.substring(0, collectionMatchState.lastIndexOf("/"));
  } while (collectionMatchState.length > 0);
}
export {
  searchForPage
};
//# sourceMappingURL=data:application/json;base64,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
