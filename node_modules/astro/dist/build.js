import fs from "fs";
import path from "path";
import {fileURLToPath} from "url";
import {performance} from "perf_hooks";
import eslexer from "es-module-lexer";
import cheerio from "cheerio";
import del from "del";
import {bold, green, yellow, red, underline} from "kleur/colors";
import mime from "mime";
import glob from "tiny-glob";
import {bundleCSS} from "./build/bundle/css.js";
import {bundleJS, collectJSImports} from "./build/bundle/js.js";
import {buildCollectionPage, buildStaticPage, getPageType} from "./build/page.js";
import {generateSitemap} from "./build/sitemap.js";
import {logURLStats, collectBundleStats, mapBundleStatsToURLStats} from "./build/stats.js";
import {getDistPath, stopTimer} from "./build/util.js";
import {debug, defaultLogDestination, defaultLogLevel, error, info, warn} from "./logger.js";
import {createRuntime} from "./runtime.js";
const defaultLogging = {
  level: defaultLogLevel,
  dest: defaultLogDestination
};
async function allPages(root) {
  const cwd = fileURLToPath(root);
  const files = await glob("**/*.{astro,md}", {cwd, filesOnly: true});
  return files.map((f) => new URL(f, root));
}
function isRemote(url) {
  if (url.startsWith("http://") || url.startsWith("https://") || url.startsWith("//"))
    return true;
  return false;
}
async function build(astroConfig, logging = defaultLogging) {
  const {projectRoot, pages: pagesRoot} = astroConfig;
  const dist = new URL(astroConfig.dist + "/", projectRoot);
  const buildState = {};
  const depTree = {};
  const timer = {};
  const runtimeLogging = {
    level: "error",
    dest: defaultLogDestination
  };
  if (!astroConfig.buildOptions.site) {
    warn(logging, "config", `Set "buildOptions.site" to generate correct canonical URLs and sitemap`);
  }
  const mode = "production";
  const runtime = await createRuntime(astroConfig, {mode, logging: runtimeLogging});
  const {runtimeConfig} = runtime;
  const {snowpackRuntime} = runtimeConfig;
  try {
    await del(fileURLToPath(dist));
    timer.build = performance.now();
    const pages = await allPages(pagesRoot);
    info(logging, "build", yellow("! building pages..."));
    try {
      await Promise.all(pages.map((filepath) => {
        const buildPage = getPageType(filepath) === "collection" ? buildCollectionPage : buildStaticPage;
        return buildPage({
          astroConfig,
          buildState,
          filepath,
          logging,
          mode,
          snowpackRuntime,
          astroRuntime: runtime,
          site: astroConfig.buildOptions.site
        });
      }));
    } catch (e) {
      if (e.filename) {
        let stack = e.stack.replace(/Object\.__render \(/gm, "").replace(/\/_astro\/(.+)\.astro\.js\:\d+\:\d+\)/gm, (_, $1) => "file://" + fileURLToPath(projectRoot) + $1 + ".astro").split("\n");
        stack.splice(1, 0, `    at file://${e.filename}`);
        stack = stack.join("\n");
        error(logging, "build", `${red(`Unable to render ${underline(e.filename.replace(fileURLToPath(projectRoot), ""))}`)}

${stack}
`);
      } else {
        error(logging, "build", e.message);
      }
      error(logging, "build", red("\u2715 building pages failed!"));
      await runtime.shutdown();
      return 1;
    }
    info(logging, "build", green("\u2714"), "pages built.");
    debug(logging, "build", `built pages [${stopTimer(timer.build)}]`);
    timer.deps = performance.now();
    const scanPromises = [];
    await eslexer.init;
    for (const id of Object.keys(buildState)) {
      if (buildState[id].contentType !== "text/html")
        continue;
      const pageDeps = findDeps(buildState[id].contents, {
        astroConfig,
        srcPath: buildState[id].srcPath
      });
      depTree[id] = pageDeps;
      for (const url of [...pageDeps.js, ...pageDeps.css, ...pageDeps.images]) {
        if (!buildState[url])
          scanPromises.push(runtime.load(url).then((result) => {
            if (result.statusCode !== 200) {
              if (result.statusCode === 404) {
                throw new Error(`${buildState[id].srcPath.href}: could not find "${path.basename(url)}"`);
              }
              throw result.error || new Error(`unexpected status ${result.statusCode} when loading ${url}`);
            }
            buildState[url] = {
              srcPath: new URL(url, projectRoot),
              contents: result.contents,
              contentType: result.contentType || mime.getType(url) || ""
            };
          }));
      }
    }
    await Promise.all(scanPromises);
    debug(logging, "build", `scanned deps [${stopTimer(timer.deps)}]`);
    info(logging, "build", yellow("! optimizing css..."));
    timer.prebundle = performance.now();
    await Promise.all([
      bundleCSS({buildState, astroConfig, logging, depTree}).then(() => {
        debug(logging, "build", `bundled CSS [${stopTimer(timer.prebundle)}]`);
      })
    ]);
    info(logging, "build", green("\u2714"), "css optimized.");
    const urlStats = await collectBundleStats(buildState, depTree);
    const jsImports = await collectJSImports(buildState);
    if (astroConfig.buildOptions.sitemap && astroConfig.buildOptions.site) {
      timer.sitemap = performance.now();
      info(logging, "build", yellow("! creating sitemap..."));
      const sitemap = generateSitemap(buildState, astroConfig.buildOptions.site);
      const sitemapPath = new URL("sitemap.xml", dist);
      await fs.promises.mkdir(path.dirname(fileURLToPath(sitemapPath)), {recursive: true});
      await fs.promises.writeFile(sitemapPath, sitemap, "utf8");
      info(logging, "build", green("\u2714"), "sitemap built.");
      debug(logging, "build", `built sitemap [${stopTimer(timer.sitemap)}]`);
    }
    timer.write = performance.now();
    await Promise.all(Object.keys(buildState).map(async (id) => {
      const outPath = new URL(`.${id}`, dist);
      const parentDir = path.dirname(fileURLToPath(outPath));
      await fs.promises.mkdir(parentDir, {recursive: true});
      await fs.promises.writeFile(outPath, buildState[id].contents, buildState[id].encoding);
      delete buildState[id];
      delete depTree[id];
    }));
    debug(logging, "build", `wrote files to disk [${stopTimer(timer.write)}]`);
    if (fs.existsSync(astroConfig.public)) {
      info(logging, "build", yellow(`! copying public folder...`));
      timer.public = performance.now();
      const cwd = fileURLToPath(astroConfig.public);
      const publicFiles = await glob("**/*", {cwd, filesOnly: true});
      await Promise.all(publicFiles.map(async (filepath) => {
        const srcPath = new URL(filepath, astroConfig.public);
        const distPath = new URL(filepath, dist);
        await fs.promises.mkdir(path.dirname(fileURLToPath(distPath)), {recursive: true});
        await fs.promises.copyFile(srcPath, distPath);
      }));
      debug(logging, "build", `copied public folder [${stopTimer(timer.public)}]`);
      info(logging, "build", green("\u2714"), "public folder copied.");
    } else {
      if (path.basename(astroConfig.public.toString()) !== "public") {
        info(logging, "tip", yellow(`! no public folder ${astroConfig.public} found...`));
      }
    }
    info(logging, "build", yellow(`! bundling...`));
    if (jsImports.size > 0) {
      timer.bundleJS = performance.now();
      const jsStats = await bundleJS(jsImports, {dist: new URL(dist + "/", projectRoot), runtime});
      mapBundleStatsToURLStats({urlStats, depTree, bundleStats: jsStats});
      debug(logging, "build", `bundled JS [${stopTimer(timer.bundleJS)}]`);
      info(logging, "build", green(`\u2714`), "bundling complete.");
    }
    logURLStats(logging, urlStats);
    await runtime.shutdown();
    info(logging, "build", bold(green("\u25B6 Build Complete!")));
    return 0;
  } catch (err) {
    error(logging, "build", err.message);
    await runtime.shutdown();
    return 1;
  }
}
function findDeps(html, {astroConfig, srcPath}) {
  const pageDeps = {
    js: new Set(),
    css: new Set(),
    images: new Set()
  };
  const $ = cheerio.load(html);
  $("script").each((_i, el) => {
    const src = $(el).attr("src");
    if (src) {
      if (isRemote(src))
        return;
      pageDeps.js.add(getDistPath(src, {astroConfig, srcPath}));
    } else {
      const text = $(el).html();
      if (!text)
        return;
      const [imports] = eslexer.parse(text);
      for (const spec of imports) {
        const importSrc = spec.n;
        if (importSrc && !isRemote(importSrc)) {
          pageDeps.js.add(getDistPath(importSrc, {astroConfig, srcPath}));
        }
      }
    }
  });
  $("link[href]").each((_i, el) => {
    const href = $(el).attr("href");
    if (href && !isRemote(href) && ($(el).attr("rel") === "stylesheet" || $(el).attr("type") === "text/css" || href.endsWith(".css"))) {
      const dist = getDistPath(href, {astroConfig, srcPath});
      pageDeps.css.add(dist);
    }
  });
  $("img[src]").each((_i, el) => {
    const src = $(el).attr("src");
    if (src && !isRemote(src)) {
      pageDeps.images.add(getDistPath(src, {astroConfig, srcPath}));
    }
  });
  $("img[srcset]").each((_i, el) => {
    const srcset = $(el).attr("srcset") || "";
    const sources = srcset.split(",");
    const srces = sources.map((s) => s.trim().split(" ")[0]);
    for (const src of srces) {
      if (!isRemote(src)) {
        pageDeps.images.add(getDistPath(src, {astroConfig, srcPath}));
      }
    }
  });
  return pageDeps;
}
export {
  build,
  findDeps
};
//# sourceMappingURL=data:application/json;base64,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
