import parser from "fast-xml-parser";
import {canonicalURL} from "./util.js";
function validateRSS(rss, srcFile) {
  if (!rss.title)
    throw new Error(`[${srcFile}] rss.title required`);
  if (!rss.description)
    throw new Error(`[${srcFile}] rss.description required`);
  if (typeof rss.item !== "function")
    throw new Error(`[${srcFile}] rss.item() function required`);
}
function generateRSS(input, options) {
  const {srcFile, feedURL} = options;
  validateRSS(input, srcFile);
  let xml = `<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"`;
  if (input.xmlns) {
    for (const [k, v] of Object.entries(input.xmlns)) {
      xml += ` xmlns:${k}="${v}"`;
    }
  }
  xml += `>`;
  xml += `<channel>`;
  xml += `<title><![CDATA[${input.title}]]></title>`;
  xml += `<description><![CDATA[${input.description}]]></description>`;
  xml += `<link>${canonicalURL(feedURL, input.site).href}</link>`;
  if (typeof input.customData === "string")
    xml += input.customData;
  if (!Array.isArray(input.data) || !input.data.length)
    throw new Error(`[${srcFile}] data() returned no items. Can\u2019t generate RSS feed.`);
  for (const item of input.data) {
    xml += `<item>`;
    const result = input.item(item);
    if (typeof result !== "object")
      throw new Error(`[${srcFile}] rss.item() expected to return an object, returned ${typeof result}.`);
    if (!result.title)
      throw new Error(`[${srcFile}] rss.item() returned object but required "title" is missing.`);
    if (!result.link)
      throw new Error(`[${srcFile}] rss.item() returned object but required "link" is missing.`);
    xml += `<title><![CDATA[${result.title}]]></title>`;
    xml += `<link>${canonicalURL(result.link, input.site).href}</link>`;
    if (result.description)
      xml += `<description><![CDATA[${result.description}]]></description>`;
    if (result.pubDate) {
      if (typeof result.pubDate === "number" || typeof result.pubDate === "string") {
        result.pubDate = new Date(result.pubDate);
      } else if (result.pubDate instanceof Date === false) {
        throw new Error("[${filename}] rss.item().pubDate must be a Date");
      }
      xml += `<pubDate>${result.pubDate.toUTCString()}</pubDate>`;
    }
    if (typeof result.customData === "string")
      xml += result.customData;
    xml += `</item>`;
  }
  xml += `</channel></rss>`;
  const isValid = parser.validate(xml);
  if (isValid !== true) {
    throw new Error(isValid);
  }
  return xml;
}
export {
  generateRSS,
  validateRSS
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2J1aWxkL3Jzcy50cyJdLAogICJtYXBwaW5ncyI6ICJBQUNBO0FBQ0E7QUFHTyxxQkFBcUIsS0FBb0IsU0FBdUI7QUFDckUsTUFBSSxDQUFDLElBQUk7QUFBTyxVQUFNLElBQUksTUFBTSxJQUFJO0FBQ3BDLE1BQUksQ0FBQyxJQUFJO0FBQWEsVUFBTSxJQUFJLE1BQU0sSUFBSTtBQUMxQyxNQUFJLE9BQU8sSUFBSSxTQUFTO0FBQVksVUFBTSxJQUFJLE1BQU0sSUFBSTtBQUFBO0FBVW5ELHFCQUF3QixPQUFvQixTQUE2QjtBQUM5RSxRQUFNLENBQUUsU0FBUyxXQUFZO0FBRTdCLGNBQVksT0FBYztBQUUxQixNQUFJLE1BQU07QUFHVixNQUFJLE1BQU0sT0FBTztBQUNmLGVBQVcsQ0FBQyxHQUFHLE1BQU0sT0FBTyxRQUFRLE1BQU0sUUFBUTtBQUNoRCxhQUFPLFVBQVUsTUFBTTtBQUFBO0FBQUE7QUFHM0IsU0FBTztBQUNQLFNBQU87QUFHUCxTQUFPLG1CQUFtQixNQUFNO0FBQ2hDLFNBQU8seUJBQXlCLE1BQU07QUFDdEMsU0FBTyxTQUFTLGFBQWEsU0FBUyxNQUFNLE1BQU07QUFDbEQsTUFBSSxPQUFPLE1BQU0sZUFBZTtBQUFVLFdBQU8sTUFBTTtBQUd2RCxNQUFJLENBQUMsTUFBTSxRQUFRLE1BQU0sU0FBUyxDQUFDLE1BQU0sS0FBSztBQUFRLFVBQU0sSUFBSSxNQUFNLElBQUk7QUFDMUUsYUFBVyxRQUFRLE1BQU0sTUFBTTtBQUM3QixXQUFPO0FBQ1AsVUFBTSxTQUFTLE1BQU0sS0FBSztBQUUxQixRQUFJLE9BQU8sV0FBVztBQUFVLFlBQU0sSUFBSSxNQUFNLElBQUksOERBQThELE9BQU87QUFDekgsUUFBSSxDQUFDLE9BQU87QUFBTyxZQUFNLElBQUksTUFBTSxJQUFJO0FBQ3ZDLFFBQUksQ0FBQyxPQUFPO0FBQU0sWUFBTSxJQUFJLE1BQU0sSUFBSTtBQUN0QyxXQUFPLG1CQUFtQixPQUFPO0FBQ2pDLFdBQU8sU0FBUyxhQUFhLE9BQU8sTUFBTSxNQUFNLE1BQU07QUFDdEQsUUFBSSxPQUFPO0FBQWEsYUFBTyx5QkFBeUIsT0FBTztBQUMvRCxRQUFJLE9BQU8sU0FBUztBQUVsQixVQUFJLE9BQU8sT0FBTyxZQUFZLFlBQVksT0FBTyxPQUFPLFlBQVksVUFBVTtBQUM1RSxlQUFPLFVBQVUsSUFBSSxLQUFLLE9BQU87QUFBQSxpQkFDeEIsT0FBTyxtQkFBbUIsU0FBUyxPQUFPO0FBQ25ELGNBQU0sSUFBSSxNQUFNO0FBQUE7QUFFbEIsYUFBTyxZQUFZLE9BQU8sUUFBUTtBQUFBO0FBRXBDLFFBQUksT0FBTyxPQUFPLGVBQWU7QUFBVSxhQUFPLE9BQU87QUFDekQsV0FBTztBQUFBO0FBR1QsU0FBTztBQUdQLFFBQU0sVUFBVSxPQUFPLFNBQVM7QUFDaEMsTUFBSSxZQUFZLE1BQU07QUFFcEIsVUFBTSxJQUFJLE1BQU07QUFBQTtBQUdsQixTQUFPO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
