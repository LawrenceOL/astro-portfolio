var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import path from "path";
import {compile as compilePathToRegexp} from "path-to-regexp";
import {fileURLToPath} from "url";
import {validateCollectionModule, validateCollectionResult} from "../util.js";
import {generateRSS} from "./rss.js";
function getPageType(filepath) {
  if (/\$[^.]+.astro$/.test(filepath.pathname))
    return "collection";
  return "static";
}
async function buildCollectionPage({astroConfig, filepath, astroRuntime, snowpackRuntime, site, buildState}) {
  const {pages: pagesRoot} = astroConfig;
  const srcURL = filepath.pathname.replace(pagesRoot.pathname, "");
  const pagesPath = astroConfig.pages.pathname.replace(astroConfig.projectRoot.pathname, "");
  const snowpackURL = `/_astro/${pagesPath}${srcURL}.js`;
  const mod = await snowpackRuntime.importModule(snowpackURL);
  validateCollectionModule(mod, filepath.pathname);
  const pageCollection = await mod.exports.createCollection();
  validateCollectionResult(pageCollection, filepath.pathname);
  let {route, paths: getPaths = () => [{params: {}}]} = pageCollection;
  const toPath = compilePathToRegexp(route);
  const allPaths = getPaths();
  const allRoutes = allPaths.map((p) => toPath(p.params));
  const builtURLs = new Set();
  async function loadPage(url) {
    if (builtURLs.has(url)) {
      return;
    }
    builtURLs.add(url);
    const result = await astroRuntime.load(url);
    if (result.statusCode === 200) {
      const outPath = path.posix.join(url, "/index.html");
      buildState[outPath] = {
        srcPath: filepath,
        contents: result.contents,
        contentType: "text/html",
        encoding: "utf8"
      };
    }
    return {url, result};
  }
  const loadResults = await Promise.all(allRoutes.map(loadPage));
  for (const loadResult of loadResults) {
    if (!loadResult) {
      continue;
    }
    const result = loadResult.result;
    if (result.statusCode >= 500) {
      throw new Error(result.error);
    }
    if (result.statusCode === 200) {
      const {collectionInfo} = result;
      if (collectionInfo == null ? void 0 : collectionInfo.rss) {
        if (!site) {
          throw new Error(`[${srcURL}] createCollection() tried to generate RSS but "buildOptions.site" missing in astro.config.mjs`);
        }
        const feedURL = "/feed" + loadResult.url + ".xml";
        const rss = generateRSS(__spreadProps(__spreadValues({}, collectionInfo.rss), {site}), {srcFile: srcURL, feedURL});
        buildState[feedURL] = {
          srcPath: filepath,
          contents: rss,
          contentType: "application/rss+xml",
          encoding: "utf8"
        };
      }
      if (collectionInfo == null ? void 0 : collectionInfo.additionalURLs) {
        await Promise.all([...collectionInfo.additionalURLs].map(loadPage));
      }
    }
  }
}
async function buildStaticPage({astroConfig, buildState, filepath, astroRuntime}) {
  const {pages: pagesRoot} = astroConfig;
  const url = filepath.pathname.replace(pagesRoot.pathname, "/").replace(/.(astro|md)$/, "").replace(/\/index$/, "/");
  const result = await astroRuntime.load(url);
  if (result.statusCode !== 200) {
    let err = result.error;
    if (!(err instanceof Error))
      err = new Error(err);
    err.filename = fileURLToPath(filepath);
    throw err;
  }
  const outFile = path.posix.join(url, "/index.html");
  buildState[outFile] = {
    srcPath: filepath,
    contents: result.contents,
    contentType: "text/html",
    encoding: "utf8"
  };
}
export {
  buildCollectionPage,
  buildStaticPage,
  getPageType
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2J1aWxkL3BhZ2UudHMiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQWNPLHFCQUFxQixVQUF3QztBQUNsRSxNQUFJLGlCQUFpQixLQUFLLFNBQVM7QUFBVyxXQUFPO0FBQ3JELFNBQU87QUFBQTtBQUlULG1DQUEwQyxDQUFFLGFBQWEsVUFBVSxjQUFjLGlCQUFpQixNQUFNLGFBQStDO0FBQ3JKLFFBQU0sQ0FBRSxPQUFPLGFBQWM7QUFDN0IsUUFBTSxTQUFTLFNBQVMsU0FBUyxRQUFRLFVBQVUsVUFBVTtBQUM3RCxRQUFNLFlBQVksWUFBWSxNQUFNLFNBQVMsUUFBUSxZQUFZLFlBQVksVUFBVTtBQUN2RixRQUFNLGNBQWMsV0FBVyxZQUFZO0FBQzNDLFFBQU0sTUFBTSxNQUFNLGdCQUFnQixhQUFhO0FBQy9DLDJCQUF5QixLQUFLLFNBQVM7QUFDdkMsUUFBTSxpQkFBeUMsTUFBTSxJQUFJLFFBQVE7QUFDakUsMkJBQXlCLGdCQUFnQixTQUFTO0FBQ2xELE1BQUksQ0FBRSxPQUFPLE9BQU8sV0FBVyxNQUFNLENBQUMsQ0FBRSxRQUFRLFFBQVU7QUFDMUQsUUFBTSxTQUFTLG9CQUFvQjtBQUNuQyxRQUFNLFdBQVc7QUFDakIsUUFBTSxZQUFzQixTQUFTLElBQUksQ0FBQyxNQUFNLE9BQU8sRUFBRTtBQUd6RCxRQUFNLFlBQVksSUFBSTtBQUd0QiwwQkFBd0IsS0FBdUU7QUFDN0YsUUFBSSxVQUFVLElBQUksTUFBTTtBQUN0QjtBQUFBO0FBRUYsY0FBVSxJQUFJO0FBQ2QsVUFBTSxTQUFTLE1BQU0sYUFBYSxLQUFLO0FBQ3ZDLFFBQUksT0FBTyxlQUFlLEtBQUs7QUFDN0IsWUFBTSxVQUFVLEtBQUssTUFBTSxLQUFLLEtBQUs7QUFDckMsaUJBQVcsV0FBVztBQUFBLFFBQ3BCLFNBQVM7QUFBQSxRQUNULFVBQVUsT0FBTztBQUFBLFFBQ2pCLGFBQWE7QUFBQSxRQUNiLFVBQVU7QUFBQTtBQUFBO0FBR2QsV0FBTyxDQUFFLEtBQUs7QUFBQTtBQUdoQixRQUFNLGNBQWMsTUFBTSxRQUFRLElBQUksVUFBVSxJQUFJO0FBQ3BELGFBQVcsY0FBYyxhQUFhO0FBQ3BDLFFBQUksQ0FBQyxZQUFZO0FBQ2Y7QUFBQTtBQUVGLFVBQU0sU0FBUyxXQUFXO0FBQzFCLFFBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsWUFBTSxJQUFJLE1BQU8sT0FBZTtBQUFBO0FBRWxDLFFBQUksT0FBTyxlQUFlLEtBQUs7QUFDN0IsWUFBTSxDQUFFLGtCQUFtQjtBQUMzQixVQUFJLGlEQUFnQixLQUFLO0FBQ3ZCLFlBQUksQ0FBQyxNQUFNO0FBQ1QsZ0JBQU0sSUFBSSxNQUFNLElBQUk7QUFBQTtBQUV0QixjQUFNLFVBQVUsVUFBVSxXQUFXLE1BQU07QUFDM0MsY0FBTSxNQUFNLFlBQVksaUNBQU0sZUFBZSxNQUFyQixDQUFrQyxRQUFRLENBQUUsU0FBUyxRQUFRO0FBQ3JGLG1CQUFXLFdBQVc7QUFBQSxVQUNwQixTQUFTO0FBQUEsVUFDVCxVQUFVO0FBQUEsVUFDVixhQUFhO0FBQUEsVUFDYixVQUFVO0FBQUE7QUFBQTtBQUdkLFVBQUksaURBQWdCLGdCQUFnQjtBQUNsQyxjQUFNLFFBQVEsSUFBSSxDQUFDLEdBQUcsZUFBZSxnQkFBZ0IsSUFBSTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBT2pFLCtCQUFzQyxDQUFFLGFBQWEsWUFBWSxVQUFVLGVBQWlEO0FBQzFILFFBQU0sQ0FBRSxPQUFPLGFBQWM7QUFDN0IsUUFBTSxNQUFNLFNBQVMsU0FDbEIsUUFBUSxVQUFVLFVBQVUsS0FDNUIsUUFBUSxnQkFBZ0IsSUFDeEIsUUFBUSxZQUFZO0FBQ3ZCLFFBQU0sU0FBUyxNQUFNLGFBQWEsS0FBSztBQUN2QyxNQUFJLE9BQU8sZUFBZSxLQUFLO0FBQzdCLFFBQUksTUFBTyxPQUFlO0FBQzFCLFFBQUksQ0FBRSxnQkFBZTtBQUFRLFlBQU0sSUFBSSxNQUFNO0FBQzdDLFFBQUksV0FBVyxjQUFjO0FBQzdCLFVBQU07QUFBQTtBQUVSLFFBQU0sVUFBVSxLQUFLLE1BQU0sS0FBSyxLQUFLO0FBQ3JDLGFBQVcsV0FBVztBQUFBLElBQ3BCLFNBQVM7QUFBQSxJQUNULFVBQVUsT0FBTztBQUFBLElBQ2pCLGFBQWE7QUFBQSxJQUNiLFVBQVU7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
