import {info, table} from "../logger.js";
import {underline, bold} from "kleur/colors";
import gzipSize from "gzip-size";
function createURLStats() {
  return new Map();
}
function createBundleStats() {
  return new Map();
}
async function addBundleStats(bundleStatsMap, code, filename) {
  const gzsize = await gzipSize(code);
  bundleStatsMap.set(filename, {
    size: Buffer.byteLength(code),
    gzipSize: gzsize
  });
}
function mapBundleStatsToURLStats({urlStats, depTree, bundleStats}) {
  var _a;
  for (let [srcPath, stats] of bundleStats) {
    for (let url of urlStats.keys()) {
      if (depTree[url] && depTree[url].js.has("/" + srcPath)) {
        (_a = urlStats.get(url)) == null ? void 0 : _a.stats.push(stats);
      }
    }
  }
}
async function collectBundleStats(buildState, depTree) {
  const urlStats = createURLStats();
  await Promise.all(Object.keys(buildState).map(async (id) => {
    if (!depTree[id])
      return;
    const stats = await Promise.all([...depTree[id].js, ...depTree[id].css, ...depTree[id].images].map(async (url) => {
      if (!buildState[url])
        return void 0;
      const stat = {
        size: Buffer.byteLength(buildState[url].contents),
        gzipSize: await gzipSize(buildState[url].contents)
      };
      return stat;
    }));
    urlStats.set(id, {
      dynamicImports: new Set(),
      stats: stats.filter((s) => !!s)
    });
  }));
  return urlStats;
}
function logURLStats(logging, urlStats) {
  const builtURLs = [...urlStats.keys()].map((url) => url.replace(/index\.html$/, ""));
  builtURLs.sort((a, b) => a.localeCompare(b, "en", {numeric: true}));
  info(logging, null, "");
  const log = table(logging, [60, 20]);
  log(info, "   " + bold(underline("Pages")), bold(underline("Page Weight (GZip)")));
  const lastIndex = builtURLs.length - 1;
  builtURLs.forEach((url, index) => {
    var _a;
    const sep = index === 0 ? "\u250C" : index === lastIndex ? "\u2514" : "\u251C";
    const urlPart = " " + sep + " " + url;
    const bytes = ((_a = urlStats.get(url) || urlStats.get(url + "index.html")) == null ? void 0 : _a.stats.map((s) => s.gzipSize).reduce((a, b) => a + b, 0)) || 0;
    const kb = (bytes * 1e-3).toFixed(2);
    const sizePart = kb + " kB";
    log(info, urlPart + "index.html", sizePart);
  });
}
export {
  addBundleStats,
  collectBundleStats,
  createBundleStats,
  createURLStats,
  logURLStats,
  mapBundleStatsToURLStats
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2J1aWxkL3N0YXRzLnRzIl0sCiAgIm1hcHBpbmdzIjogIkFBR0E7QUFDQTtBQUNBO0FBZU8sMEJBQXVDO0FBQzVDLFNBQU8sSUFBSTtBQUFBO0FBR04sNkJBQTZDO0FBQ2xELFNBQU8sSUFBSTtBQUFBO0FBR2IsOEJBQXFDLGdCQUFnQyxNQUFjLFVBQWtCO0FBQ25HLFFBQU0sU0FBUyxNQUFNLFNBQVM7QUFFOUIsaUJBQWUsSUFBSSxVQUFVO0FBQUEsSUFDM0IsTUFBTSxPQUFPLFdBQVc7QUFBQSxJQUN4QixVQUFVO0FBQUE7QUFBQTtBQUlQLGtDQUFrQyxDQUFFLFVBQVUsU0FBUyxjQUEyRjtBQXJDeko7QUFzQ0UsV0FBUyxDQUFDLFNBQVMsVUFBVSxhQUFhO0FBQ3hDLGFBQVMsT0FBTyxTQUFTLFFBQVE7QUFDL0IsVUFBSSxRQUFRLFFBQVEsUUFBUSxLQUFLLEdBQUcsSUFBSSxNQUFNLFVBQVU7QUFDdEQsdUJBQVMsSUFBSSxTQUFiLG1CQUFtQixNQUFNLEtBQUs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU10QyxrQ0FBeUMsWUFBeUIsU0FBMEM7QUFDMUcsUUFBTSxXQUFXO0FBRWpCLFFBQU0sUUFBUSxJQUNaLE9BQU8sS0FBSyxZQUFZLElBQUksT0FBTyxPQUFPO0FBQ3hDLFFBQUksQ0FBQyxRQUFRO0FBQUs7QUFDbEIsVUFBTSxRQUFRLE1BQU0sUUFBUSxJQUMxQixDQUFDLEdBQUcsUUFBUSxJQUFJLElBQUksR0FBRyxRQUFRLElBQUksS0FBSyxHQUFHLFFBQVEsSUFBSSxRQUFRLElBQUksT0FBTyxRQUFRO0FBQ2hGLFVBQUksQ0FBQyxXQUFXO0FBQU0sZUFBTztBQUM3QixZQUFNLE9BQU87QUFBQSxRQUNYLE1BQU0sT0FBTyxXQUFXLFdBQVcsS0FBSztBQUFBLFFBQ3hDLFVBQVUsTUFBTSxTQUFTLFdBQVcsS0FBSztBQUFBO0FBRTNDLGFBQU87QUFBQTtBQUdYLGFBQVMsSUFBSSxJQUFJO0FBQUEsTUFDZixnQkFBZ0IsSUFBSTtBQUFBLE1BQ3BCLE9BQU8sTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFBQTtBQUFBO0FBS25DLFNBQU87QUFBQTtBQUdGLHFCQUFxQixTQUFxQixVQUF1QjtBQUN0RSxRQUFNLFlBQVksQ0FBQyxHQUFHLFNBQVMsUUFBUSxJQUFJLENBQUMsUUFBUSxJQUFJLFFBQVEsZ0JBQWdCO0FBQ2hGLFlBQVUsS0FBSyxDQUFDLEdBQUcsTUFBTSxFQUFFLGNBQWMsR0FBRyxNQUFNLENBQUUsU0FBUztBQUM3RCxPQUFLLFNBQVMsTUFBTTtBQUNwQixRQUFNLE1BQU0sTUFBTSxTQUFTLENBQUMsSUFBSTtBQUNoQyxNQUFJLE1BQU0sUUFBUSxLQUFLLFVBQVUsV0FBVyxLQUFLLFVBQVU7QUFFM0QsUUFBTSxZQUFZLFVBQVUsU0FBUztBQUNyQyxZQUFVLFFBQVEsQ0FBQyxLQUFLLFVBQVU7QUFqRnBDO0FBa0ZJLFVBQU0sTUFBTSxVQUFVLElBQUksV0FBTSxVQUFVLFlBQVksV0FBTTtBQUM1RCxVQUFNLFVBQVUsTUFBTSxNQUFNLE1BQU07QUFFbEMsVUFBTSxRQUFTLGdCQUFTLElBQUksUUFBUSxTQUFTLElBQUksTUFBTSxrQkFBeEMsbUJBQXdELE1BQU0sSUFBSSxDQUFDLE1BQU0sRUFBRSxVQUFVLE9BQU8sQ0FBQyxHQUFHLE1BQU0sSUFBSSxHQUFHLE9BQU07QUFDbEksVUFBTSxLQUFNLFNBQVEsTUFBTyxRQUFRO0FBQ25DLFVBQU0sV0FBVyxLQUFLO0FBQ3RCLFFBQUksTUFBTSxVQUFVLGNBQWM7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
