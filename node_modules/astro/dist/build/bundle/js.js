import {fileURLToPath} from "url";
import {rollup} from "rollup";
import {terser} from "rollup-plugin-terser";
import {createBundleStats, addBundleStats} from "../stats.js";
function collectJSImports(buildState) {
  const imports = new Set();
  for (const id of Object.keys(buildState)) {
    if (buildState[id].contentType === "application/javascript")
      imports.add(id);
  }
  return imports;
}
async function bundleJS(imports, {runtime, dist}) {
  const ROOT = "astro:root";
  const root = `
  ${[...imports].map((url) => `import '${url}';`).join("\n")}
`;
  const inputOptions = {
    input: [...imports],
    plugins: [
      {
        name: "astro:build",
        resolveId(source, imported) {
          if (source === ROOT) {
            return source;
          }
          if (source.startsWith("/")) {
            return source;
          }
          if (imported) {
            const outUrl = new URL(source, "http://example.com" + imported);
            return outUrl.pathname;
          }
          return null;
        },
        async load(id) {
          if (id === ROOT) {
            return root;
          }
          const result = await runtime.load(id);
          if (result.statusCode !== 200) {
            return null;
          }
          return result.contents.toString("utf-8");
        }
      }
    ]
  };
  const build = await rollup(inputOptions);
  const outputOptions = {
    dir: fileURLToPath(dist),
    format: "esm",
    exports: "named",
    entryFileNames(chunk) {
      const {facadeModuleId} = chunk;
      if (!facadeModuleId)
        throw new Error(`facadeModuleId missing: ${chunk.name}`);
      return facadeModuleId.substr(1);
    },
    plugins: [
      terser()
    ]
  };
  const stats = createBundleStats();
  const {output} = await build.write(outputOptions);
  await Promise.all(output.map(async (chunk) => {
    const code = chunk.code || "";
    await addBundleStats(stats, code, chunk.fileName);
  }));
  return stats;
}
export {
  bundleJS,
  collectJSImports
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2J1aWxkL2J1bmRsZS9qcy50cyJdLAogICJtYXBwaW5ncyI6ICJBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBUU8sMEJBQTBCLFlBQXNDO0FBQ3JFLFFBQU0sVUFBVSxJQUFJO0FBQ3BCLGFBQVcsTUFBTSxPQUFPLEtBQUssYUFBYTtBQUN4QyxRQUFJLFdBQVcsSUFBSSxnQkFBZ0I7QUFBMEIsY0FBUSxJQUFJO0FBQUE7QUFFM0UsU0FBTztBQUFBO0FBSVQsd0JBQStCLFNBQXNCLENBQUUsU0FBUyxPQUFnRDtBQUM5RyxRQUFNLE9BQU87QUFDYixRQUFNLE9BQU87QUFBQSxJQUNYLENBQUMsR0FBRyxTQUFTLElBQUksQ0FBQyxRQUFRLFdBQVcsU0FBUyxLQUFLO0FBQUE7QUFHckQsUUFBTSxlQUE2QjtBQUFBLElBQ2pDLE9BQU8sQ0FBQyxHQUFHO0FBQUEsSUFDWCxTQUFTO0FBQUEsTUFDUDtBQUFBLFFBQ0UsTUFBTTtBQUFBLFFBQ04sVUFBVSxRQUFnQixVQUFtQjtBQUMzQyxjQUFJLFdBQVcsTUFBTTtBQUNuQixtQkFBTztBQUFBO0FBRVQsY0FBSSxPQUFPLFdBQVcsTUFBTTtBQUMxQixtQkFBTztBQUFBO0FBR1QsY0FBSSxVQUFVO0FBQ1osa0JBQU0sU0FBUyxJQUFJLElBQUksUUFBUSx1QkFBdUI7QUFDdEQsbUJBQU8sT0FBTztBQUFBO0FBR2hCLGlCQUFPO0FBQUE7QUFBQSxjQUVILEtBQUssSUFBWTtBQUNyQixjQUFJLE9BQU8sTUFBTTtBQUNmLG1CQUFPO0FBQUE7QUFHVCxnQkFBTSxTQUFTLE1BQU0sUUFBUSxLQUFLO0FBRWxDLGNBQUksT0FBTyxlQUFlLEtBQUs7QUFDN0IsbUJBQU87QUFBQTtBQUdULGlCQUFPLE9BQU8sU0FBUyxTQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFNeEMsUUFBTSxRQUFRLE1BQU0sT0FBTztBQUUzQixRQUFNLGdCQUErQjtBQUFBLElBQ25DLEtBQUssY0FBYztBQUFBLElBQ25CLFFBQVE7QUFBQSxJQUNSLFNBQVM7QUFBQSxJQUNULGVBQWUsT0FBTztBQUNwQixZQUFNLENBQUUsa0JBQW1CO0FBQzNCLFVBQUksQ0FBQztBQUFnQixjQUFNLElBQUksTUFBTSwyQkFBMkIsTUFBTTtBQUN0RSxhQUFPLGVBQWUsT0FBTztBQUFBO0FBQUEsSUFFL0IsU0FBUztBQUFBLE1BR1A7QUFBQTtBQUFBO0FBSUosUUFBTSxRQUFRO0FBQ2QsUUFBTSxDQUFFLFVBQVcsTUFBTSxNQUFNLE1BQU07QUFDckMsUUFBTSxRQUFRLElBQ1osT0FBTyxJQUFJLE9BQU8sVUFBVTtBQUMxQixVQUFNLE9BQVEsTUFBc0IsUUFBUTtBQUM1QyxVQUFNLGVBQWUsT0FBTyxNQUFNLE1BQU07QUFBQTtBQUk1QyxTQUFPO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
