/// <reference types="node" />
import type { AstroConfig, CollectionRSS, RuntimeMode } from './@types/astro';
import type { CompileError as ICompileError } from '@astrojs/parser';
import { SnowpackDevServer, ServerRuntime as SnowpackServerRuntime, SnowpackConfig } from 'snowpack';
import { LogOptions } from './logger.js';
import { ConfigManager } from './config_manager.js';
interface RuntimeConfig {
    astroConfig: AstroConfig;
    logging: LogOptions;
    mode: RuntimeMode;
    snowpack: SnowpackDevServer;
    snowpackRuntime: SnowpackServerRuntime;
    snowpackConfig: SnowpackConfig;
    configManager: ConfigManager;
}
interface CollectionInfo {
    additionalURLs: Set<string>;
    rss?: {
        data: any[] & CollectionRSS;
    };
}
declare type LoadResultSuccess = {
    statusCode: 200;
    contents: string | Buffer;
    contentType?: string | false;
    collectionInfo?: CollectionInfo;
};
declare type LoadResultNotFound = {
    statusCode: 404;
    error: Error;
};
declare type LoadResultRedirect = {
    statusCode: 301 | 302;
    location: string;
};
declare type LoadResultError = {
    statusCode: 500;
} & ({
    type: 'parse-error';
    error: ICompileError;
} | {
    type: 'ssr';
    error: Error;
} | {
    type: 'not-found';
    error: ICompileError;
} | {
    type: 'unknown';
    error: Error;
});
export declare type LoadResult = LoadResultSuccess | LoadResultNotFound | LoadResultRedirect | LoadResultError;
export interface AstroRuntime {
    runtimeConfig: RuntimeConfig;
    load: (rawPathname: string | undefined) => Promise<LoadResult>;
    shutdown: () => Promise<void>;
}
export interface RuntimeOptions {
    mode: RuntimeMode;
    logging: LogOptions;
}
/** Core Astro runtime */
export declare function createRuntime(astroConfig: AstroConfig, { mode, logging }: RuntimeOptions): Promise<AstroRuntime>;
export {};
