var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import {compile as compilePathToRegexp, match as matchPathToRegexp} from "path-to-regexp";
import resolve from "resolve";
import {existsSync, promises as fs} from "fs";
import {fileURLToPath} from "url";
import {posix as path} from "path";
import {performance} from "perf_hooks";
import {
  loadConfiguration,
  logger as snowpackLogger,
  NotFoundError,
  startServer as startSnowpackServer
} from "snowpack";
import parser from "@astrojs/parser";
const {CompileError} = parser;
import {canonicalURL, getSrcPath, stopTimer} from "./build/util.js";
import {debug, info} from "./logger.js";
import {configureSnowpackLogger} from "./snowpack-logger.js";
import {searchForPage} from "./search.js";
import snowpackExternals from "./external.js";
import {nodeBuiltinsMap} from "./node_builtins.js";
import {ConfigManager} from "./config_manager.js";
import {validateCollectionModule, validateCollectionResult} from "./util.js";
configureSnowpackLogger(snowpackLogger);
async function load(config, rawPathname) {
  const {logging, snowpackRuntime, snowpack, configManager} = config;
  const {buildOptions, devOptions} = config.astroConfig;
  const site = new URL(buildOptions.site || `http://${devOptions.hostname}:${devOptions.port}`);
  const fullurl = new URL(rawPathname || "/", site.origin);
  const reqPath = decodeURI(fullurl.pathname);
  info(logging, "access", reqPath);
  const searchResult = await searchForPage(fullurl, config.astroConfig);
  if (searchResult.statusCode === 404) {
    try {
      const result = await snowpack.loadUrl(reqPath);
      if (!result)
        throw new Error(`Unable to load ${reqPath}`);
      return __spreadValues({
        statusCode: 200
      }, result);
    } catch (err) {
      if (err.failed) {
        return {statusCode: 500, type: "unknown", error: err};
      }
      return {statusCode: 404, error: err};
    }
  }
  if (searchResult.statusCode === 301) {
    return {statusCode: 301, location: searchResult.pathname};
  }
  const snowpackURL = searchResult.location.snowpackURL;
  let collectionInfo;
  let pageProps = {};
  try {
    if (configManager.needsUpdate()) {
      await configManager.update();
    }
    const mod = await snowpackRuntime.importModule(snowpackURL);
    debug(logging, "resolve", `${reqPath} -> ${snowpackURL}`);
    if (path.posix.basename(searchResult.location.fileURL.pathname).startsWith("$")) {
      validateCollectionModule(mod, searchResult.pathname);
      const pageCollection = await mod.exports.createCollection();
      validateCollectionResult(pageCollection, searchResult.pathname);
      const {route, paths: getPaths = () => [{params: {}}], props: getProps, paginate: isPaginated, rss: createRSS} = pageCollection;
      debug(logging, "collection", `use route "${route}" to match request "${reqPath}"`);
      const reqToParams = matchPathToRegexp(route);
      const toPath = compilePathToRegexp(route);
      const reqParams = reqToParams(reqPath);
      if (!reqParams) {
        throw new Error(`[createCollection] route pattern does not match request: "${route}". (${searchResult.pathname})`);
      }
      if (isPaginated && reqParams.params.page === "1") {
        return {statusCode: 404, error: new Error(`[createCollection] The first page of a paginated collection has no page number in the URL. (${searchResult.pathname})`)};
      }
      const pageNum = parseInt(reqParams.params.page || 1);
      const allPaths = getPaths();
      const matchedPathObject = allPaths.find((p) => toPath(__spreadProps(__spreadValues({}, p.params), {page: reqParams.params.page})) === reqPath);
      debug(logging, "collection", `matched path: ${JSON.stringify(matchedPathObject)}`);
      if (!matchedPathObject) {
        throw new Error(`[createCollection] no matching path found: "${route}". (${searchResult.pathname})`);
      }
      const matchedParams = matchedPathObject.params;
      if (matchedParams.page) {
        throw new Error(`[createCollection] "page" param is reserved for pagination and handled for you by Astro. It cannot be returned by "paths()". (${searchResult.pathname})`);
      }
      let paginateUtility = () => {
        throw new Error(`[createCollection] paginate() function was called but "paginate: true" was not set. (${searchResult.pathname})`);
      };
      let lastPage;
      let paginateCallCount;
      if (isPaginated) {
        paginateCallCount = 0;
        paginateUtility = (data, args = {}) => {
          paginateCallCount++;
          let {pageSize} = args;
          if (!pageSize) {
            pageSize = 10;
          }
          const start = pageSize === Infinity ? 0 : (pageNum - 1) * pageSize;
          const end = Math.min(start + pageSize, data.length);
          lastPage = Math.max(1, Math.ceil(data.length / pageSize));
          if (pageNum === 1) {
            collectionInfo = {
              additionalURLs: new Set(),
              rss: void 0
            };
            if (createRSS) {
              collectionInfo.rss = __spreadProps(__spreadValues({}, createRSS), {
                data: [...data]
              });
            }
            for (const page of [...Array(lastPage - 1).keys()]) {
              collectionInfo.additionalURLs.add(toPath(__spreadProps(__spreadValues({}, matchedParams), {page: page + 2})));
            }
          }
          return {
            data: data.slice(start, end),
            start,
            end: end - 1,
            total: data.length,
            page: {
              size: pageSize,
              current: pageNum,
              last: lastPage
            },
            url: {
              current: reqPath,
              next: pageNum === lastPage ? void 0 : toPath(__spreadProps(__spreadValues({}, matchedParams), {page: pageNum + 1})),
              prev: pageNum === 1 ? void 0 : toPath(__spreadProps(__spreadValues({}, matchedParams), {page: pageNum - 1 === 1 ? void 0 : pageNum - 1}))
            }
          };
        };
      }
      pageProps = await getProps({params: matchedParams, paginate: paginateUtility});
      debug(logging, "collection", `page props: ${JSON.stringify(pageProps)}`);
      if (paginateCallCount !== void 0 && paginateCallCount !== 1) {
        throw new Error(`[createCollection] paginate() function must be called 1 time when "paginate: true". Called ${paginateCallCount} times instead. (${searchResult.pathname})`);
      }
      if (lastPage !== void 0 && pageNum > lastPage) {
        return {statusCode: 404, error: new Error(`[createCollection] page ${pageNum} does not exist. Available pages: 1-${lastPage} (${searchResult.pathname})`)};
      }
    }
    const requestURL = new URL(fullurl.toString());
    if (reqPath !== "/500") {
      requestURL.search = "";
    }
    let html = await mod.exports.__renderPage({
      request: {
        url: requestURL,
        canonicalURL: canonicalURL(requestURL.pathname, site.toString())
      },
      children: [],
      props: pageProps,
      css: Array.isArray(mod.css) ? mod.css : typeof mod.css === "string" ? [mod.css] : []
    });
    return {
      statusCode: 200,
      contentType: "text/html; charset=utf-8",
      contents: html,
      collectionInfo
    };
  } catch (err) {
    if (err.code === "parse-error" || err instanceof SyntaxError) {
      return {
        statusCode: 500,
        type: "parse-error",
        error: err
      };
    }
    if (err instanceof ReferenceError && err.toString().includes("window is not defined")) {
      return {
        statusCode: 500,
        type: "ssr",
        error: new Error(`[${reqPath}]
    The window object is not available during server-side rendering (SSR).
    Try using \`import.meta.env.SSR\` to write SSR-friendly code.
    https://docs.astro.build/reference/api-reference/#importmeta`)
      };
    }
    if (err instanceof NotFoundError && rawPathname) {
      const fileMatch = err.toString().match(/\(([^\)]+)\)/);
      const missingFile = fileMatch && fileMatch[1].replace(/^\/_astro/, "").replace(/\.proxy\.js$/, "") || void 0;
      const distPath = path.extname(rawPathname) ? rawPathname : rawPathname.replace(/\/?$/, "/index.html");
      const srcFile = getSrcPath(distPath, {astroConfig: config.astroConfig});
      const code = existsSync(srcFile) ? await fs.readFile(srcFile, "utf8") : "";
      let start = 0;
      const segments = missingFile ? missingFile.split("/").filter((segment) => !!segment) : [];
      while (segments.length) {
        const importMatch = code.indexOf(segments.join("/"));
        if (importMatch >= 0) {
          start = importMatch;
          break;
        }
        segments.shift();
      }
      return {
        statusCode: 500,
        type: "not-found",
        error: new CompileError({
          code,
          filename: srcFile.pathname,
          start,
          message: `Could not find${missingFile ? ` "${missingFile}"` : " file"}`
        })
      };
    }
    return {
      statusCode: 500,
      type: "unknown",
      error: err
    };
  }
}
async function createSnowpack(astroConfig, options) {
  var _a;
  const {projectRoot, src} = astroConfig;
  const {mode, logging, resolvePackageUrl} = options;
  const frontendPath = new URL("./frontend/", import.meta.url);
  const resolveDependency = (dep) => resolve.sync(dep, {basedir: fileURLToPath(projectRoot)});
  const isHmrEnabled = mode === "development";
  const configManager = new ConfigManager(astroConfig, resolvePackageUrl);
  let snowpack;
  let astroPluginOptions = {
    astroConfig,
    mode,
    logging,
    resolvePackageUrl,
    configManager
  };
  const mountOptions = __spreadProps(__spreadValues({}, existsSync(astroConfig.public) ? {[fileURLToPath(astroConfig.public)]: "/"} : {}), {
    [fileURLToPath(frontendPath)]: "/_astro_frontend",
    [fileURLToPath(src)]: "/_astro/src"
  });
  if (astroConfig.devOptions.tailwindConfig) {
    process.env.TAILWIND_DISABLE_TOUCH = true;
  }
  const rendererInstances = await configManager.buildRendererInstances();
  const knownEntrypoints = [
    "astro/dist/internal/__astro_component.js",
    "astro/dist/internal/element-registry.js",
    "astro/dist/internal/fetch-content.js",
    "astro/dist/internal/__astro_slot.js",
    "prismjs"
  ];
  for (const renderer of rendererInstances) {
    knownEntrypoints.push(renderer.server);
    if (renderer.client) {
      knownEntrypoints.push(renderer.client);
    }
    if (renderer.knownEntrypoints) {
      knownEntrypoints.push(...renderer.knownEntrypoints);
    }
    knownEntrypoints.push(...renderer.polyfills);
    knownEntrypoints.push(...renderer.hydrationPolyfills);
  }
  const external = snowpackExternals.concat([]);
  for (const renderer of rendererInstances) {
    if (renderer.external) {
      external.push(...renderer.external);
    }
  }
  const rendererSnowpackPlugins = rendererInstances.filter((renderer) => renderer.snowpackPlugin).map((renderer) => renderer.snowpackPlugin);
  const snowpackConfig = await loadConfiguration({
    root: fileURLToPath(projectRoot),
    mount: mountOptions,
    mode,
    plugins: [
      [fileURLToPath(new URL("../snowpack-plugin-jsx.cjs", import.meta.url)), astroPluginOptions],
      [fileURLToPath(new URL("../snowpack-plugin.cjs", import.meta.url)), astroPluginOptions],
      ...rendererSnowpackPlugins,
      resolveDependency("@snowpack/plugin-sass"),
      [
        resolveDependency("@snowpack/plugin-postcss"),
        {
          config: {
            plugins: __spreadValues({
              [resolveDependency("autoprefixer")]: {}
            }, astroConfig.devOptions.tailwindConfig ? {[resolveDependency("tailwindcss")]: astroConfig.devOptions.tailwindConfig} : {})
          }
        }
      ]
    ],
    devOptions: {
      open: "none",
      output: "stream",
      port: 0,
      hmr: isHmrEnabled,
      tailwindConfig: astroConfig.devOptions.tailwindConfig
    },
    buildOptions: {
      baseUrl: astroConfig.buildOptions.site || "/",
      out: astroConfig.dist
    },
    packageOptions: {
      knownEntrypoints,
      external
    }
  });
  const polyfillNode = snowpackConfig.packageOptions.polyfillNode;
  if (!polyfillNode) {
    snowpackConfig.alias = Object.assign({}, Object.fromEntries(nodeBuiltinsMap), (_a = snowpackConfig.alias) != null ? _a : {});
  }
  snowpack = await startSnowpackServer({
    config: snowpackConfig,
    lockfile: null
  }, {
    isWatch: mode === "development"
  });
  const snowpackRuntime = snowpack.getServerRuntime();
  astroPluginOptions.configManager.snowpackRuntime = snowpackRuntime;
  return {snowpack, snowpackRuntime, snowpackConfig, configManager};
}
async function createRuntime(astroConfig, {mode, logging}) {
  let snowpack;
  const timer = {};
  const resolvePackageUrl = async (pkgName) => snowpack.getUrlForPackage(pkgName);
  timer.backend = performance.now();
  const {
    snowpack: snowpackInstance,
    snowpackRuntime,
    snowpackConfig,
    configManager
  } = await createSnowpack(astroConfig, {
    logging,
    mode,
    resolvePackageUrl
  });
  snowpack = snowpackInstance;
  debug(logging, "core", `snowpack created [${stopTimer(timer.backend)}]`);
  const runtimeConfig = {
    astroConfig,
    logging,
    mode,
    snowpack,
    snowpackRuntime,
    snowpackConfig,
    configManager
  };
  return {
    runtimeConfig,
    load: load.bind(null, runtimeConfig),
    shutdown: () => snowpack.shutdown()
  };
}
export {
  createRuntime
};
//# sourceMappingURL=data:application/json;base64,
